// Code generated by protoc-gen-go.
// source: go-simple-apm.proto
// DO NOT EDIT!

/*
Package go_simple_apm is a generated protocol buffer package.

It is generated from these files:
	go-simple-apm.proto

It has these top-level messages:
	Result
	CpuStatus
	MemoryStatus
*/
package go_simple_apm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Result struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type CpuStatus struct {
	Modelname string    `protobuf:"bytes,1,opt,name=modelname" json:"modelname,omitempty"`
	Cores     int32     `protobuf:"varint,2,opt,name=cores" json:"cores,omitempty"`
	Status    []float64 `protobuf:"fixed64,3,rep,packed,name=status" json:"status,omitempty"`
}

func (m *CpuStatus) Reset()                    { *m = CpuStatus{} }
func (m *CpuStatus) String() string            { return proto.CompactTextString(m) }
func (*CpuStatus) ProtoMessage()               {}
func (*CpuStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CpuStatus) GetModelname() string {
	if m != nil {
		return m.Modelname
	}
	return ""
}

func (m *CpuStatus) GetCores() int32 {
	if m != nil {
		return m.Cores
	}
	return 0
}

func (m *CpuStatus) GetStatus() []float64 {
	if m != nil {
		return m.Status
	}
	return nil
}

type MemoryStatus struct {
	Total       uint64  `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Free        uint64  `protobuf:"varint,2,opt,name=free" json:"free,omitempty"`
	Used        uint64  `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,4,opt,name=usedPercent" json:"usedPercent,omitempty"`
}

func (m *MemoryStatus) Reset()                    { *m = MemoryStatus{} }
func (m *MemoryStatus) String() string            { return proto.CompactTextString(m) }
func (*MemoryStatus) ProtoMessage()               {}
func (*MemoryStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MemoryStatus) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MemoryStatus) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *MemoryStatus) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *MemoryStatus) GetUsedPercent() float64 {
	if m != nil {
		return m.UsedPercent
	}
	return 0
}

func init() {
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*CpuStatus)(nil), "CpuStatus")
	proto.RegisterType((*MemoryStatus)(nil), "MemoryStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APM service

type APMClient interface {
	SendCpuStatus(ctx context.Context, in *CpuStatus, opts ...grpc.CallOption) (*Result, error)
	SendMemoryStatus(ctx context.Context, in *MemoryStatus, opts ...grpc.CallOption) (*Result, error)
}

type aPMClient struct {
	cc *grpc.ClientConn
}

func NewAPMClient(cc *grpc.ClientConn) APMClient {
	return &aPMClient{cc}
}

func (c *aPMClient) SendCpuStatus(ctx context.Context, in *CpuStatus, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/APM/SendCpuStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPMClient) SendMemoryStatus(ctx context.Context, in *MemoryStatus, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/APM/SendMemoryStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for APM service

type APMServer interface {
	SendCpuStatus(context.Context, *CpuStatus) (*Result, error)
	SendMemoryStatus(context.Context, *MemoryStatus) (*Result, error)
}

func RegisterAPMServer(s *grpc.Server, srv APMServer) {
	s.RegisterService(&_APM_serviceDesc, srv)
}

func _APM_SendCpuStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMServer).SendCpuStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/APM/SendCpuStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMServer).SendCpuStatus(ctx, req.(*CpuStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _APM_SendMemoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMServer).SendMemoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/APM/SendMemoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMServer).SendMemoryStatus(ctx, req.(*MemoryStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _APM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "APM",
	HandlerType: (*APMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCpuStatus",
			Handler:    _APM_SendCpuStatus_Handler,
		},
		{
			MethodName: "SendMemoryStatus",
			Handler:    _APM_SendMemoryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-simple-apm.proto",
}

func init() { proto.RegisterFile("go-simple-apm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x14, 0xc4, 0x8d, 0xfd, 0xa3, 0x7d, 0xba, 0x20, 0xcf, 0x45, 0x82, 0x78, 0x08, 0x3d, 0x48, 0x0f,
	0x6e, 0x0f, 0xfa, 0x09, 0xc4, 0xf3, 0xc2, 0xf2, 0xf6, 0xe0, 0xc1, 0x53, 0xdd, 0x3e, 0x45, 0x68,
	0x9a, 0x92, 0xa4, 0x07, 0xbf, 0xbd, 0x24, 0x2d, 0x6e, 0xf7, 0x94, 0xf9, 0x0d, 0x93, 0x21, 0x19,
	0xb8, 0xfd, 0x36, 0x1b, 0xf7, 0xa3, 0x87, 0x8e, 0x37, 0xcd, 0xa0, 0xeb, 0xc1, 0x1a, 0x6f, 0x4a,
	0x05, 0x39, 0xb1, 0x1b, 0x3b, 0x8f, 0x77, 0x90, 0xdb, 0xa8, 0xa4, 0x50, 0xa2, 0xba, 0xa4, 0x99,
	0xca, 0x77, 0x28, 0xde, 0x86, 0x71, 0xef, 0x1b, 0x3f, 0x3a, 0x7c, 0x80, 0x42, 0x9b, 0x96, 0xbb,
	0xbe, 0xd1, 0x1c, 0x73, 0x05, 0x1d, 0x0d, 0x5c, 0x43, 0x76, 0x30, 0x96, 0x9d, 0x3c, 0x57, 0xa2,
	0xca, 0x68, 0x82, 0x50, 0xec, 0xe2, 0x6d, 0x99, 0xa8, 0xa4, 0x12, 0x34, 0x53, 0xd9, 0xc3, 0xf5,
	0x96, 0xb5, 0xb1, 0xbf, 0x73, 0xf7, 0x1a, 0x32, 0x6f, 0x7c, 0xd3, 0xc5, 0xde, 0x94, 0x26, 0x40,
	0x84, 0xf4, 0xcb, 0x32, 0xc7, 0xca, 0x94, 0xa2, 0x0e, 0xde, 0xe8, 0xb8, 0x95, 0xc9, 0xe4, 0x05,
	0x8d, 0x0a, 0xae, 0xc2, 0xb9, 0x63, 0x7b, 0xe0, 0xde, 0xcb, 0x54, 0x89, 0x4a, 0xd0, 0xd2, 0x7a,
	0xfe, 0x80, 0xe4, 0x75, 0xb7, 0xc5, 0x47, 0x58, 0xed, 0xb9, 0x6f, 0x8f, 0x7f, 0x82, 0xfa, 0x5f,
	0xdf, 0x5f, 0xd4, 0xd3, 0x1a, 0xe5, 0x19, 0x3e, 0xc1, 0x4d, 0xc8, 0x9d, 0x3c, 0x71, 0x55, 0x2f,
	0x71, 0x91, 0xfe, 0xcc, 0xe3, 0x9c, 0x2f, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xac, 0x60, 0x9d,
	0x41, 0x65, 0x01, 0x00, 0x00,
}
